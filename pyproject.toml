[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "lambda-calc"
version = "0.1.0"
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.12"
dependencies = [
    "lark[interegular]>=1.2.2",
]

[dependency-groups]
dev = [
    "ipykernel>=6.29.5",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "rich>=14.0.0",
    "ruff>=0.11.2",
]

[tool.hatch.build.targets.wheel]
packages = ["src/lambda_calc"]

# pytest

[tool.pytest.ini_options]
testpaths = [
    "test",
]
addopts = [
    "--import-mode=importlib",
]

# linting/formatting

[tool.ruff]
extend-exclude = [
    "**/venv",
    "**/.*",
    "**/node_modules",
    "**/__pycache__",
]

[tool.ruff.lint]
extend-select = [
    "I", # import sorting
    "RUF022", # __all__ sorting
]
extend-ignore = [
    # covered by Pyright
    "F821", # undefined variable
    "F401", # imported but unused
    "F841", # unused variable
]

[tool.ruff.lint.isort]
combine-as-imports = true

# type checking

[tool.pyright]
pythonVersion = "3.12"
pythonPlatform = "All"

include = [
    "src",
]
exclude = [
    "**/venv",
    "**/.*",
    "**/node_modules",
    "**/__pycache__",
]

typeCheckingMode = "basic"

strictDictionaryInference = true
strictListInference = true
strictSetInference = true

reportAssertAlwaysTrue = "error"
reportConstantRedefinition = "error"
reportDeprecated = "error"
reportFunctionMemberAccess = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInvalidStringEscapeSequence = "error"
reportInvalidStubStatement = "error"
reportInvalidTypeVarUse = "error"
reportMatchNotExhaustive = "error"
reportMissingParameterType = "error"
reportOverlappingOverload = "error"
reportSelfClsParameterName = "error"
reportTypeCommentUsage = "error"
reportUnknownParameterType = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryContains = "error"
reportUnsupportedDunderAll = "error"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedNamedTuple = "error"
reportWildcardImportFromLibrary = "error"

reportMissingTypeArgument = "warning"
reportPrivateUsage = "warning"
reportUnknownArgumentType = "warning"
reportUnknownLambdaType = "warning"
reportUnknownMemberType = "warning"
reportUnknownVariableType = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryIsInstance = "warning"
reportUnusedClass = "warning"
reportUnusedExpression = "warning"
reportUnusedFunction = "warning"
reportUnusedImport = "warning"
reportUnusedVariable = "warning"

reportMissingTypeStubs = "none"
reportDuplicateImport = "none"
